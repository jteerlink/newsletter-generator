{
  "success": false,
  "timestamp": "1754976433.3552418",
  "test_suites": {
    "unit_tests": {
      "returncode": 1,
      "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.12.7, pytest-8.4.1, pluggy-1.5.0 -- /opt/anaconda3/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/jaredteerlink/repos/newsletter-generator\nconfigfile: pyproject.toml\nplugins: asyncio-1.1.0, cov-6.2.1, mock-3.14.1, langsmith-0.3.45, anyio-4.2.0\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 143 items\n\ntests/test_section_aware_prompts.py::TestSectionType::test_section_type_values PASSED [  0%]\ntests/test_section_aware_prompts.py::TestSectionType::test_section_type_from_string PASSED [  1%]\ntests/test_section_aware_prompts.py::TestPromptContext::test_prompt_context_creation PASSED [  2%]\ntests/test_section_aware_prompts.py::TestPromptContext::test_prompt_context_defaults PASSED [  2%]\ntests/test_section_aware_prompts.py::TestSectionPromptTemplates::test_introduction_template PASSED [  3%]\ntests/test_section_aware_prompts.py::TestSectionPromptTemplates::test_analysis_template PASSED [  4%]\ntests/test_section_aware_prompts.py::TestSectionPromptTemplates::test_tutorial_template PASSED [  4%]\ntests/test_section_aware_prompts.py::TestSectionPromptTemplates::test_news_template PASSED [  5%]\ntests/test_section_aware_prompts.py::TestSectionPromptTemplates::test_conclusion_template PASSED [  6%]\ntests/test_section_aware_prompts.py::TestSectionPromptTemplates::test_special_requirements_formatting PASSED [  6%]\ntests/test_section_aware_prompts.py::TestSectionPromptTemplates::test_audience_guidance PASSED [  7%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_manager_initialization PASSED [  8%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_get_section_prompt_with_enum PASSED [  9%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_get_section_prompt_with_string PASSED [  9%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_get_section_prompt_invalid_string PASSED [ 10%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_error_handling FAILED [ 11%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_detect_section_type PASSED [ 11%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_get_available_sections PASSED [ 12%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_create_prompt_context PASSED [ 13%]\ntests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_fallback_prompt PASSED [ 13%]\ntests/test_section_aware_prompts.py::TestConvenienceFunctions::test_get_section_prompt_function PASSED [ 14%]\ntests/test_section_aware_prompts.py::TestConvenienceFunctions::test_detect_section_type_function FAILED [ 15%]\ntests/test_section_aware_prompts.py::TestConvenienceFunctions::test_detect_section_type_with_context PASSED [ 16%]\ntests/test_section_aware_prompts.py::TestIntegration::test_end_to_end_prompt_generation PASSED [ 16%]\ntests/test_section_aware_prompts.py::TestIntegration::test_section_detection_and_prompt_generation PASSED [ 17%]\ntests/test_section_aware_prompts.py::TestEdgeCases::test_empty_context PASSED [ 18%]\ntests/test_section_aware_prompts.py::TestEdgeCases::test_missing_context_fields PASSED [ 18%]\ntests/test_section_aware_prompts.py::TestEdgeCases::test_very_large_word_count PASSED [ 19%]\ntests/test_section_aware_prompts.py::TestEdgeCases::test_zero_word_count PASSED [ 20%]\ntests/test_section_aware_refinement.py::TestRefinementPass::test_refinement_pass_values PASSED [ 20%]\ntests/test_section_aware_refinement.py::TestSectionBoundary::test_section_boundary_creation PASSED [ 21%]\ntests/test_section_aware_refinement.py::TestSectionBoundary::test_section_boundary_defaults PASSED [ 22%]\ntests/test_section_aware_refinement.py::TestSectionContent::test_section_content_creation PASSED [ 23%]\ntests/test_section_aware_refinement.py::TestSectionContent::test_section_content_defaults PASSED [ 23%]\ntests/test_section_aware_refinement.py::TestSectionBoundaryDetector::test_detect_explicit_boundaries PASSED [ 24%]\ntests/test_section_aware_refinement.py::TestSectionBoundaryDetector::test_detect_mixed_patterns PASSED [ 25%]\ntests/test_section_aware_refinement.py::TestSectionBoundaryDetector::test_no_explicit_boundaries PASSED [ 25%]\ntests/test_section_aware_refinement.py::TestSectionBoundaryDetector::test_boundary_positions PASSED [ 26%]\ntests/test_section_aware_refinement.py::TestSectionBoundaryDetector::test_confidence_scores PASSED [ 27%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_initialization PASSED [ 27%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_refine_newsletter_workflow PASSED [ 28%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_extract_sections PASSED [ 29%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_section_quality_validation PASSED [ 30%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_refine_section_iterations PASSED [ 30%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_reassemble_content PASSED [ 31%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_validate_narrative_flow PASSED [ 32%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_error_handling PASSED [ 32%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_determine_pass_type PASSED [ 33%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_basic_refinements FAILED [ 34%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_tutorial_structure_improvement PASSED [ 34%]\ntests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_news_structure_improvement PASSED [ 35%]\ntests/test_section_aware_refinement.py::TestQualityValidation::test_introduction_quality_validation PASSED [ 36%]\ntests/test_section_aware_refinement.py::TestQualityValidation::test_analysis_quality_validation PASSED [ 37%]\ntests/test_section_aware_refinement.py::TestQualityValidation::test_tutorial_quality_validation PASSED [ 37%]\ntests/test_section_aware_refinement.py::TestQualityValidation::test_news_quality_validation PASSED [ 38%]\ntests/test_section_aware_refinement.py::TestQualityValidation::test_conclusion_quality_validation PASSED [ 39%]\ntests/test_section_aware_refinement.py::TestTransitionLogic::test_needs_transition_detection PASSED [ 39%]\ntests/test_section_aware_refinement.py::TestTransitionLogic::test_transition_generation PASSED [ 40%]\ntests/test_section_aware_refinement.py::TestIntegration::test_full_refinement_pipeline PASSED [ 41%]\ntests/test_section_aware_refinement.py::TestIntegration::test_boundary_detection_integration PASSED [ 41%]\ntests/test_section_quality_metrics.py::TestQualityDimension::test_quality_dimension_values PASSED [ 42%]\ntests/test_section_quality_metrics.py::TestQualityMetric::test_quality_metric_creation PASSED [ 43%]\ntests/test_section_quality_metrics.py::TestQualityMetric::test_quality_metric_defaults PASSED [ 44%]\ntests/test_section_quality_metrics.py::TestSectionQualityMetrics::test_section_quality_metrics_creation PASSED [ 44%]\ntests/test_section_quality_metrics.py::TestSectionQualityMetrics::test_get_weighted_score PASSED [ 45%]\ntests/test_section_quality_metrics.py::TestSectionQualityMetrics::test_get_weighted_score_empty_metrics PASSED [ 46%]\ntests/test_section_quality_metrics.py::TestSectionQualityMetrics::test_get_issues PASSED [ 46%]\ntests/test_section_quality_metrics.py::TestSectionQualityMetrics::test_get_suggestions PASSED [ 47%]\ntests/test_section_quality_metrics.py::TestAggregatedQualityReport::test_aggregated_quality_report_creation PASSED [ 48%]\ntests/test_section_quality_metrics.py::TestAggregatedQualityReport::test_get_section_breakdown PASSED [ 48%]\ntests/test_section_quality_metrics.py::TestAggregatedQualityReport::test_get_quality_summary PASSED [ 49%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_analyzer_initialization PASSED [ 50%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_analyze_section_basic PASSED [ 51%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_section_specific_weights PASSED [ 51%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_clarity_assessment PASSED [ 52%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_relevance_assessment PASSED [ 53%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_completeness_assessment PASSED [ 53%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_accuracy_assessment PASSED [ 54%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_engagement_assessment PASSED [ 55%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_structure_assessment PASSED [ 55%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_readability_calculation PASSED [ 56%]\ntests/test_section_quality_metrics.py::TestSectionQualityAnalyzer::test_syllable_counting PASSED [ 57%]\ntests/test_section_quality_metrics.py::TestSectionAwareQualitySystem::test_system_initialization PASSED [ 58%]\ntests/test_section_quality_metrics.py::TestSectionAwareQualitySystem::test_analyze_newsletter_quality PASSED [ 58%]\ntests/test_section_quality_metrics.py::TestSectionAwareQualitySystem::test_validate_section_thresholds PASSED [ 59%]\ntests/test_section_quality_metrics.py::TestSectionAwareQualitySystem::test_get_improvement_recommendations PASSED [ 60%]\ntests/test_section_quality_metrics.py::TestSectionAwareQualitySystem::test_cross_section_consistency_calculation PASSED [ 60%]\ntests/test_section_quality_metrics.py::TestSectionAwareQualitySystem::test_narrative_flow_calculation PASSED [ 61%]\ntests/test_section_quality_metrics.py::TestIntegration::test_end_to_end_quality_analysis PASSED [ 62%]\ntests/test_section_quality_metrics.py::TestIntegration::test_quality_threshold_customization PASSED [ 62%]\ntests/test_section_quality_metrics.py::TestIntegration::test_boundary_detection_integration PASSED [ 63%]\ntests/test_continuity_validator.py::TestContinuityIssueType::test_continuity_issue_types PASSED [ 64%]\ntests/test_continuity_validator.py::TestContinuityIssue::test_continuity_issue_creation PASSED [ 65%]\ntests/test_continuity_validator.py::TestContinuityIssue::test_continuity_issue_defaults PASSED [ 65%]\ntests/test_continuity_validator.py::TestTransitionAnalysis::test_transition_analysis_creation PASSED [ 66%]\ntests/test_continuity_validator.py::TestTransitionAnalysis::test_transition_analysis_defaults PASSED [ 67%]\ntests/test_continuity_validator.py::TestTransitionAnalyzer::test_analyzer_initialization PASSED [ 67%]\ntests/test_continuity_validator.py::TestTransitionAnalyzer::test_analyze_transition_with_explicit_indicator FAILED [ 68%]\ntests/test_continuity_validator.py::TestTransitionAnalyzer::test_analyze_transition_without_indicator PASSED [ 69%]\ntests/test_continuity_validator.py::TestTransitionAnalyzer::test_has_explicit_transition PASSED [ 69%]\ntests/test_continuity_validator.py::TestTransitionAnalyzer::test_calculate_transition_quality PASSED [ 70%]\ntests/test_continuity_validator.py::TestTransitionAnalyzer::test_identify_transition_issues PASSED [ 71%]\ntests/test_continuity_validator.py::TestTransitionAnalyzer::test_generate_transition_suggestions FAILED [ 72%]\ntests/test_continuity_validator.py::TestTransitionAnalyzer::test_logical_gap_detection PASSED [ 72%]\ntests/test_continuity_validator.py::TestStyleConsistencyAnalyzer::test_analyzer_initialization PASSED [ 73%]\ntests/test_continuity_validator.py::TestStyleConsistencyAnalyzer::test_analyze_style_consistency PASSED [ 74%]\ntests/test_continuity_validator.py::TestStyleConsistencyAnalyzer::test_single_section_consistency PASSED [ 74%]\ntests/test_continuity_validator.py::TestStyleConsistencyAnalyzer::test_create_style_profile PASSED [ 75%]\ntests/test_continuity_validator.py::TestStyleConsistencyAnalyzer::test_tone_consistency_calculation PASSED [ 76%]\ntests/test_continuity_validator.py::TestStyleConsistencyAnalyzer::test_identify_style_issues PASSED [ 76%]\ntests/test_continuity_validator.py::TestStyleConsistencyAnalyzer::test_variance_calculation PASSED [ 77%]\ntests/test_continuity_validator.py::TestRedundancyDetector::test_detector_initialization PASSED [ 78%]\ntests/test_continuity_validator.py::TestRedundancyDetector::test_detect_redundancy_high_similarity PASSED [ 79%]\ntests/test_continuity_validator.py::TestRedundancyDetector::test_detect_redundancy_low_similarity PASSED [ 79%]\ntests/test_continuity_validator.py::TestRedundancyDetector::test_calculate_content_similarity PASSED [ 80%]\ntests/test_continuity_validator.py::TestRedundancyDetector::test_empty_content_similarity PASSED [ 81%]\ntests/test_continuity_validator.py::TestContinuityValidator::test_validator_initialization PASSED [ 81%]\ntests/test_continuity_validator.py::TestContinuityValidator::test_validate_newsletter_continuity PASSED [ 82%]\ntests/test_continuity_validator.py::TestContinuityValidator::test_analyze_all_transitions PASSED [ 83%]\ntests/test_continuity_validator.py::TestContinuityValidator::test_calculate_narrative_flow_score PASSED [ 83%]\ntests/test_continuity_validator.py::TestContinuityValidator::test_calculate_transition_quality_score PASSED [ 84%]\ntests/test_continuity_validator.py::TestContinuityValidator::test_generate_recommendations PASSED [ 85%]\ntests/test_continuity_validator.py::TestContinuityValidator::test_empty_sections_handling PASSED [ 86%]\ntests/test_continuity_validator.py::TestContinuityValidator::test_single_section_handling PASSED [ 86%]\ntests/test_continuity_validator.py::TestContinuityReport::test_continuity_report_creation PASSED [ 87%]\ntests/test_continuity_validator.py::TestIntegration::test_end_to_end_continuity_validation PASSED [ 88%]\ntests/test_continuity_validator.py::TestIntegration::test_problematic_content_detection FAILED [ 88%]\ntests/test_continuity_validator.py::TestIntegration::test_high_quality_content_validation FAILED [ 89%]\ntests/test_integration.py::TestSectionAwareWorkflow::test_end_to_end_section_aware_processing FAILED [ 90%]\ntests/test_integration.py::TestSectionAwareWorkflow::test_section_detection_accuracy PASSED [ 90%]\ntests/test_integration.py::TestSectionAwareWorkflow::test_quality_metrics_integration PASSED [ 91%]\ntests/test_integration.py::TestSectionAwareWorkflow::test_continuity_validation_integration PASSED [ 92%]\ntests/test_integration.py::TestComponentInteractions::test_prompt_refinement_integration PASSED [ 93%]\ntests/test_integration.py::TestComponentInteractions::test_quality_continuity_correlation FAILED [ 93%]\ntests/test_integration.py::TestComponentInteractions::test_boundary_detection_consistency FAILED [ 94%]\ntests/test_integration.py::TestPerformanceAndScalability::test_large_content_processing PASSED [ 95%]\ntests/test_integration.py::TestPerformanceAndScalability::test_multiple_section_types FAILED [ 95%]\ntests/test_integration.py::TestErrorHandling::test_empty_content_handling PASSED [ 96%]\ntests/test_integration.py::TestErrorHandling::test_malformed_content_handling PASSED [ 97%]\ntests/test_integration.py::TestErrorHandling::test_invalid_context_handling PASSED [ 97%]\ntests/test_integration.py::TestBackwardCompatibility::test_convenience_functions PASSED [ 98%]\ntests/test_integration.py::TestBackwardCompatibility::test_fallback_behavior PASSED [ 99%]\ntests/test_integration.py::TestRealWorldScenarios::test_typical_newsletter_workflow FAILED [100%]\nERROR: Coverage failure: total of 9 is less than fail-under=80\n\n\n=================================== FAILURES ===================================\n______________ TestSectionAwarePromptManager.test_error_handling _______________\n\nself = <MagicMock name='logger.error' id='4426835312'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'error' to have been called once. Called 0 times.\n\n/opt/anaconda3/lib/python3.12/unittest/mock.py:928: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_section_aware_prompts.TestSectionAwarePromptManager object at 0x107a547d0>\nmock_logger = <MagicMock name='logger' id='4373218032'>\nmanager = <src.core.section_aware_prompts.SectionAwarePromptManager object at 0x1078a6db0>\n\n    @patch('src.core.section_aware_prompts.logger')\n    def test_error_handling(self, mock_logger, manager):\n        \"\"\"Test error handling in prompt generation.\"\"\"\n        # Create invalid context that will cause an error\n        invalid_context = {'invalid_key': 'invalid_value'}\n    \n        prompt = manager.get_section_prompt(SectionType.ANALYSIS, invalid_context)\n    \n        # Should return fallback prompt\n        assert isinstance(prompt, str)\n        assert len(prompt) > 0\n>       mock_logger.error.assert_called_once()\nE       AssertionError: Expected 'error' to have been called once. Called 0 times.\n\ntests/test_section_aware_prompts.py:254: AssertionError\n---------------------------- Captured stderr setup -----------------------------\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\n------------------------------ Captured log setup ------------------------------\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\n__________ TestConvenienceFunctions.test_detect_section_type_function __________\n\nself = <tests.test_section_aware_prompts.TestConvenienceFunctions object at 0x1078a7cb0>\n\n    def test_detect_section_type_function(self):\n        \"\"\"Test detect_section_type convenience function.\"\"\"\n        content = \"Welcome to our tutorial on machine learning\"\n    \n        section_type = detect_section_type(content)\n    \n>       assert section_type == 'tutorial'\nE       AssertionError: assert 'introduction' == 'tutorial'\nE         \nE         - tutorial\nE         + introduction\n\ntests/test_section_aware_prompts.py:326: AssertionError\n----------------------------- Captured stderr call -----------------------------\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\n------------------------------ Captured log call -------------------------------\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\n____________ TestSectionAwareRefinementLoop.test_basic_refinements _____________\n\nself = <tests.test_section_aware_refinement.TestSectionAwareRefinementLoop object at 0x107a9ad50>\nrefinement_loop = <src.core.section_aware_refinement.SectionAwareRefinementLoop object at 0x107d9f9e0>\n\n    def test_basic_refinements(self, refinement_loop):\n        \"\"\"Test basic text refinements.\"\"\"\n        test_cases = [\n            (\"Text with   extra   spaces\", \"Text with extra spaces\"),\n            (\"Sentence.Next sentence\", \"Sentence. Next sentence\"),\n            (\"Text\\n\\n\\n\\nwith extra newlines\", \"Text\\n\\nwith extra newlines\")\n        ]\n    \n        for input_text, expected_pattern in test_cases:\n            result = refinement_loop._apply_basic_refinements(input_text, SectionType.ANALYSIS)\n    \n            # Check that basic cleanup was applied\n>           assert \"  \" not in result  # No double spaces\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError: assert '  ' not in 'Text with   extra   spaces'\nE             \nE             '  ' is contained here:\nE               Text with   extra   spaces\nE             ?          ++\n\ntests/test_section_aware_refinement.py:410: AssertionError\n---------------------------- Captured stderr setup -----------------------------\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\nINFO:src.core.section_aware_refinement:Section-aware refinement loop initialized (max_iterations=3)\n------------------------------ Captured log setup ------------------------------\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\nINFO     src.core.section_aware_refinement:section_aware_refinement.py:190 Section-aware refinement loop initialized (max_iterations=3)\n____ TestTransitionAnalyzer.test_analyze_transition_with_explicit_indicator ____\n\nself = <tests.test_continuity_validator.TestTransitionAnalyzer object at 0x107afdd60>\nanalyzer = <src.core.continuity_validator.TransitionAnalyzer object at 0x107e3a630>\n\n    def test_analyze_transition_with_explicit_indicator(self, analyzer):\n        \"\"\"Test transition analysis with explicit transition words.\"\"\"\n        from_content = \"This concludes our introduction to machine learning.\"\n        to_content = \"However, the implementation challenges are significant.\"\n    \n        analysis = analyzer.analyze_transition(\n            from_content, SectionType.INTRODUCTION,\n            to_content, SectionType.ANALYSIS\n        )\n    \n        assert isinstance(analysis, TransitionAnalysis)\n        assert analysis.from_section == SectionType.INTRODUCTION\n        assert analysis.to_section == SectionType.ANALYSIS\n        assert analysis.has_explicit_transition is True\n>       assert analysis.transition_quality > 0.5  # Should be good with \"However\"\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: assert 0.3 > 0.5\nE        +  where 0.3 = TransitionAnalysis(from_section=<SectionType.INTRODUCTION: 'introduction'>, to_section=<SectionType.ANALYSIS: 'analysis'>, transition_quality=0.3, has_explicit_transition=True, transition_text='This concludes our introduction to machine learning.\\n\\nHowever, the implementation challenges are significant.', issues=[], suggestions=[]).transition_quality\n\ntests/test_continuity_validator.py:142: AssertionError\n---------------------------- Captured stderr setup -----------------------------\nINFO:src.core.continuity_validator:Transition analyzer initialized\n------------------------------ Captured log setup ------------------------------\nINFO     src.core.continuity_validator:continuity_validator.py:116 Transition analyzer initialized\n_________ TestTransitionAnalyzer.test_generate_transition_suggestions __________\n\nself = <tests.test_continuity_validator.TestTransitionAnalyzer object at 0x107afee10>\nanalyzer = <src.core.continuity_validator.TransitionAnalyzer object at 0x107e3b920>\n\n    def test_generate_transition_suggestions(self, analyzer):\n        \"\"\"Test transition suggestion generation.\"\"\"\n        issues = [\n            ContinuityIssue(\n                issue_type=ContinuityIssueType.LOGICAL_GAP,\n                severity=0.5,\n                location=\"test\",\n                description=\"test\",\n                suggestion=\"test\"\n            )\n        ]\n    \n        suggestions = analyzer._generate_transition_suggestions(\n            SectionType.INTRODUCTION, SectionType.ANALYSIS, False, issues\n        )\n    \n        assert len(suggestions) > 0\n>       assert any(\"transition\" in suggestion.lower() for suggestion in suggestions)\nE       assert False\nE        +  where False = any(<generator object TestTransitionAnalyzer.test_generate_transition_suggestions.<locals>.<genexpr> at 0x107d720c0>)\n\ntests/test_continuity_validator.py:220: AssertionError\n---------------------------- Captured stderr setup -----------------------------\nINFO:src.core.continuity_validator:Transition analyzer initialized\n------------------------------ Captured log setup ------------------------------\nINFO     src.core.continuity_validator:continuity_validator.py:116 Transition analyzer initialized\n______________ TestIntegration.test_problematic_content_detection ______________\n\nself = <tests.test_continuity_validator.TestIntegration object at 0x107ace690>\n\n    def test_problematic_content_detection(self):\n        \"\"\"Test detection of various continuity problems.\"\"\"\n        validator = ContinuityValidator()\n    \n        problematic_sections = {\n            SectionType.INTRODUCTION: \"\"\"This newsletter covers AI topics\"\"\",  # Abrupt ending\n    \n            SectionType.ANALYSIS: \"\"\"machine learning algorithms process data efficiently\n            using advanced neural network architectures\"\"\",  # Lowercase start, no transition\n    \n            SectionType.NEWS: \"\"\"Therefore, the comprehensive analysis demonstrates significant\n            findings. Furthermore, the implementation requires careful consideration.\"\"\",  # Formal tone\n    \n            SectionType.CONCLUSION: \"\"\"So basically, that's it. Pretty cool stuff overall.\"\"\"  # Informal tone\n        }\n    \n        report = validator.validate_newsletter_continuity(problematic_sections)\n    \n        # Should detect multiple issues\n        assert len(report.issues) > 0\n    \n        # Should detect style inconsistency (formal vs informal)\n        style_issues = [issue for issue in report.issues\n                      if issue.issue_type == ContinuityIssueType.TONE_SHIFT]\n        assert len(style_issues) > 0\n    \n        # Should have recommendations for improvement\n        assert len(report.recommendations) > 0\n    \n        # Should have lower consistency scores\n>       assert report.style_consistency_score < 0.8\nE       AssertionError: assert 0.928863617685733 < 0.8\nE        +  where 0.928863617685733 = ContinuityReport(overall_continuity_score=0.6953257519723866, narrative_flow_score=0.3333333333333333, style_consistency_score=0.928863617685733, transition_quality_score=0.6666666666666666, redundancy_score=1.0, sections_analyzed=4, transitions_analyzed=[TransitionAnalysis(from_section=<SectionType.INTRODUCTION: 'introduction'>, to_section=<SectionType.ANALYSIS: 'analysis'>, transition_quality=0.0, has_explicit_transition=False, transition_text='This newsletter covers AI topics\\n\\nmachine learning algorithms process data efficiently \\n            using advanced neural network architectures', issues=[ContinuityIssue(issue_type=<ContinuityIssueType.ABRUPT_TRANSITION: 'abrupt_transition'>, severity=0.6, location='Between introduction and analysis', description='Abrupt transition between section types without connecting language', suggestion='Add transitional phrases to connect the sections smoothly', section_1=<SectionType.INTRODUCTION: 'introduction'>, section_2=<SectionType.ANALYSIS: 'analysis'>, content_snippet='')], suggestions=['Consider using phrases like: examining, analyzing, exploring']), TransitionAnalysis(from_section=<SectionType.ANALYSIS: 'analysis'>, to_section=<Secti...e_count': 1.0}), issues=[ContinuityIssue(issue_type=<ContinuityIssueType.ABRUPT_TRANSITION: 'abrupt_transition'>, severity=0.6, location='Between introduction and analysis', description='Abrupt transition between section types without connecting language', suggestion='Add transitional phrases to connect the sections smoothly', section_1=<SectionType.INTRODUCTION: 'introduction'>, section_2=<SectionType.ANALYSIS: 'analysis'>, content_snippet=''), ContinuityIssue(issue_type=<ContinuityIssueType.TONE_SHIFT: 'tone_shift'>, severity=0.4, location='news section', description='Section has noticeably more formal tone than other sections', suggestion='Adjust tone to match overall newsletter style', section_1=<SectionType.NEWS: 'news'>, section_2=None, content_snippet=''), ContinuityIssue(issue_type=<ContinuityIssueType.TONE_SHIFT: 'tone_shift'>, severity=0.4, location='conclusion section', description='Section has noticeably more informal tone than other sections', suggestion='Adjust tone to match overall newsletter style', section_1=<SectionType.CONCLUSION: 'conclusion'>, section_2=None, content_snippet='')], recommendations=['Improve 2 poor section transitions with connecting language']).style_consistency_score\n\ntests/test_continuity_validator.py:790: AssertionError\n----------------------------- Captured stderr call -----------------------------\nINFO:src.core.continuity_validator:Transition analyzer initialized\nINFO:src.core.continuity_validator:Style consistency analyzer initialized\nINFO:src.core.continuity_validator:Redundancy detector initialized\nINFO:src.core.continuity_validator:Continuity validator initialized\n------------------------------ Captured log call -------------------------------\nINFO     src.core.continuity_validator:continuity_validator.py:116 Transition analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:308 Style consistency analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:497 Redundancy detector initialized\nINFO     src.core.continuity_validator:continuity_validator.py:561 Continuity validator initialized\n_____________ TestIntegration.test_high_quality_content_validation _____________\n\nself = <tests.test_continuity_validator.TestIntegration object at 0x107ace1e0>\n\n    def test_high_quality_content_validation(self):\n        \"\"\"Test validation of high-quality, well-structured content.\"\"\"\n        validator = ContinuityValidator()\n    \n        high_quality_sections = {\n            SectionType.INTRODUCTION: \"\"\"Welcome to our weekly AI research digest.\n            This comprehensive overview examines recent breakthroughs in machine learning\n            and their implications for practical applications.\"\"\",\n    \n            SectionType.ANALYSIS: \"\"\"Building on these foundations, our analysis reveals\n            significant performance improvements across multiple benchmarks.\n            The research demonstrates consistent 30% efficiency gains in processing.\"\"\",\n    \n            SectionType.CONCLUSION: \"\"\"In conclusion, these developments represent substantial\n            progress in artificial intelligence capabilities.\n            We recommend exploring these techniques for enhanced performance.\"\"\"\n        }\n    \n        report = validator.validate_newsletter_continuity(high_quality_sections)\n    \n        # Should have high overall scores\n>       assert report.overall_continuity_score > 0.7\nE       AssertionError: assert 0.6347213834390237 > 0.7\nE        +  where 0.6347213834390237 = ContinuityReport(overall_continuity_score=0.6347213834390237, narrative_flow_score=0.2, style_consistency_score=0.9990712781300793, transition_quality_score=0.5, redundancy_score=1.0, sections_analyzed=3, transitions_analyzed=[TransitionAnalysis(from_section=<SectionType.INTRODUCTION: 'introduction'>, to_section=<SectionType.ANALYSIS: 'analysis'>, transition_quality=0.0, has_explicit_transition=False, transition_text='Welcome to our weekly AI research digest. \\n            This comprehensive overview examines recent breakthroughs in machine learning \\n            and their implications for practical applications.\\n\\nBuilding on these foundations, our analysis reveals \\n            significant performance improvements across multiple benchmarks. \\n            The research demonstrates consistent 30% efficiency gains', issues=[ContinuityIssue(issue_type=<ContinuityIssueType.ABRUPT_TRANSITION: 'abrupt_transition'>, severity=0.6, location='Between introduction and analysis', description='Abrupt transition between section types without connecting language', suggestion='Add transitional phrases to connect the sections smoothly', section_1=<SectionType.INTRODUCTION: 'introduction'>, sec...=[])], style_analysis=StyleAnalysis(overall_consistency=0.9990712781300793, tone_consistency=0.9997138343902383, vocabulary_consistency=1.0, structure_consistency=0.9975, issues=[], style_profile={'avg_formality_score': 0.0, 'variance_formality_score': 0.0, 'avg_technical_density': 0.0, 'variance_technical_density': 0.0, 'avg_avg_sentence_length': 10.5, 'variance_avg_sentence_length': 0.5, 'avg_personal_pronoun_ratio': 0.04784688995215311, 'variance_personal_pronoun_ratio': 1.1446624390467237e-05, 'avg_passive_voice_ratio': 0.0, 'variance_passive_voice_ratio': 0.0, 'avg_word_count': 21.0, 'variance_word_count': 2.0, 'avg_sentence_count': 2.0, 'variance_sentence_count': 0.0}), issues=[ContinuityIssue(issue_type=<ContinuityIssueType.ABRUPT_TRANSITION: 'abrupt_transition'>, severity=0.6, location='Between introduction and analysis', description='Abrupt transition between section types without connecting language', suggestion='Add transitional phrases to connect the sections smoothly', section_1=<SectionType.INTRODUCTION: 'introduction'>, section_2=<SectionType.ANALYSIS: 'analysis'>, content_snippet='')], recommendations=['Improve 2 poor section transitions with connecting language']).overall_continuity_score\n\ntests/test_continuity_validator.py:813: AssertionError\n----------------------------- Captured stderr call -----------------------------\nINFO:src.core.continuity_validator:Transition analyzer initialized\nINFO:src.core.continuity_validator:Style consistency analyzer initialized\nINFO:src.core.continuity_validator:Redundancy detector initialized\nINFO:src.core.continuity_validator:Continuity validator initialized\n------------------------------ Captured log call -------------------------------\nINFO     src.core.continuity_validator:continuity_validator.py:116 Transition analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:308 Style consistency analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:497 Redundancy detector initialized\nINFO     src.core.continuity_validator:continuity_validator.py:561 Continuity validator initialized\n______ TestSectionAwareWorkflow.test_end_to_end_section_aware_processing _______\n\nself = <tests.test_integration.TestSectionAwareWorkflow object at 0x107acc080>\nsample_newsletter_content = \"# Welcome to AI Weekly\\n        \\nWelcome to our comprehensive AI newsletter! This week brings exciting developments ...e AI community for collective advancement.\\nStay tuned for next week's analysis of emerging trends and applications.\\n\"\nsample_context = {'audience': 'AI/ML Engineers', 'content_focus': 'Latest AI Developments', 'special_requirements': ['Include practical examples', 'Focus on implementation'], 'technical_level': 'intermediate', ...}\n\n    def test_end_to_end_section_aware_processing(self, sample_newsletter_content, sample_context):\n        \"\"\"Test complete end-to-end section-aware processing.\"\"\"\n        # 1. Initialize all components\n        prompt_manager = SectionAwarePromptManager()\n        refinement_loop = SectionAwareRefinementLoop(max_iterations=2)\n        quality_system = SectionAwareQualitySystem()\n        continuity_validator = ContinuityValidator()\n    \n        # 2. Detect and analyze sections\n        boundaries = refinement_loop.boundary_detector.detect_boundaries(sample_newsletter_content)\n        sections = refinement_loop._extract_sections(sample_newsletter_content, boundaries)\n    \n>       assert len(sections) >= 4  # Should detect multiple sections\n        ^^^^^^^^^^^^^^^^^^^^^^^^^\nE       assert 3 >= 4\nE        +  where 3 = len([SectionContent(section_type=<SectionType.INTRODUCTION: 'introduction'>, content='# Welcome to AI Weekly\\n        \\nWelcome to our comprehensive AI newsletter! This week brings exciting developments \\nin machine learning and artificial intelligence research.', boundary=SectionBoundary(section_type=<SectionType.INTRODUCTION: 'introduction'>, start_index=0, end_index=175, title='# Welcome to AI Weekly', confidence=0.9), quality_score=0.4, refinement_count=0, issues=[], improvements=[]), SectionContent(section_type=<SectionType.NEWS: 'news'>, content='## Latest News Updates\\n\\nRecent announcements have shaped the AI landscape significantly:\\n- OpenAI released GPT-4.5 with enhanced reasoning capabilities\\n- Google announced breakthrough quantum-AI hybrid research  \\n- Microsoft expanded Azure AI services globally\\n- Meta introduced new computer vision models\\n\\n## Technical Deep Dive\\n\\nFurthermore, these developments reveal important trends in AI advancement.\\nThe research data indicates substantial improvements across key metrics.\\nTechnical analysis shows convergence toward more efficient architectures.\\n\\nNew algorithms demonstrate 40% better performance on standard benchmarks.\\n...s=[]), SectionContent(section_type=<SectionType.TUTORIAL: 'tutorial'>, content=\"## Implementation Guide\\n\\nNext, let's explore practical steps for leveraging these advances:\\n\\nStep 1: Evaluate current AI infrastructure and identify upgrade opportunities\\nStep 2: Install latest development frameworks and compatibility layers  \\nStep 3: Implement pilot projects using new capabilities\\nStep 4: Monitor performance metrics and optimize configurations\\nStep 5: Scale successful implementations across production systems\\n\\n## Key Takeaways\\n\\nIn summary, this week's AI developments represent significant progress.\\nOrganizations should evaluate these advances for competitive advantage.\\nImplementation requires careful planning and systematic deployment.\\n\\nTry experimenting with these new capabilities in controlled environments.\\nShare insights with the AI community for collective advancement.\\nStay tuned for next week's analysis of emerging trends and applications.\", boundary=SectionBoundary(section_type=<SectionType.TUTORIAL: 'tutorial'>, start_index=933, end_index=1808, title='## Implementation Guide', confidence=0.9), quality_score=0.7, refinement_count=0, issues=[], improvements=[])])\n\ntests/test_integration.py:106: AssertionError\n----------------------------- Captured stderr call -----------------------------\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\nINFO:src.core.section_aware_refinement:Section-aware refinement loop initialized (max_iterations=2)\nINFO:src.core.section_quality_metrics:Section quality analyzer initialized\nINFO:src.core.section_quality_metrics:Section-aware quality system initialized\nINFO:src.core.continuity_validator:Transition analyzer initialized\nINFO:src.core.continuity_validator:Style consistency analyzer initialized\nINFO:src.core.continuity_validator:Redundancy detector initialized\nINFO:src.core.continuity_validator:Continuity validator initialized\n------------------------------ Captured log call -------------------------------\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\nINFO     src.core.section_aware_refinement:section_aware_refinement.py:190 Section-aware refinement loop initialized (max_iterations=2)\nINFO     src.core.section_quality_metrics:section_quality_metrics.py:171 Section quality analyzer initialized\nINFO     src.core.section_quality_metrics:section_quality_metrics.py:701 Section-aware quality system initialized\nINFO     src.core.continuity_validator:continuity_validator.py:116 Transition analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:308 Style consistency analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:497 Redundancy detector initialized\nINFO     src.core.continuity_validator:continuity_validator.py:561 Continuity validator initialized\n________ TestComponentInteractions.test_quality_continuity_correlation _________\n\nself = <tests.test_integration.TestComponentInteractions object at 0x107acca10>\n\n    def test_quality_continuity_correlation(self):\n        \"\"\"Test correlation between quality metrics and continuity scores.\"\"\"\n        quality_analyzer = SectionQualityAnalyzer()\n        continuity_validator = ContinuityValidator()\n    \n        # Test with high-quality, consistent content\n        high_quality_sections = {\n            SectionType.INTRODUCTION: \"\"\"Welcome to our comprehensive analysis of machine learning advances.\n            This systematic review examines recent developments and their practical implications.\"\"\",\n    \n            SectionType.ANALYSIS: \"\"\"Building on these foundations, our examination reveals significant\n            performance improvements across multiple evaluation metrics. The research demonstrates\n            consistent enhancement in computational efficiency.\"\"\",\n    \n            SectionType.CONCLUSION: \"\"\"In conclusion, these advances represent substantial progress\n            in artificial intelligence capabilities. Organizations should evaluate these developments\n            for competitive advantage and strategic planning.\"\"\"\n        }\n    \n        # Test with low-quality, inconsistent content\n        low_quality_sections = {\n            SectionType.INTRODUCTION: \"intro stuff\",\n            SectionType.ANALYSIS: \"Therefore, the comprehensive methodology demonstrates significant findings.\",\n            SectionType.CONCLUSION: \"so thats it basically\"\n        }\n    \n        # Analyze quality for both\n        high_quality_metrics = {}\n        low_quality_metrics = {}\n    \n        for section_type, content in high_quality_sections.items():\n            metrics = quality_analyzer.analyze_section(content, section_type)\n            high_quality_metrics[section_type] = metrics\n    \n        for section_type, content in low_quality_sections.items():\n            metrics = quality_analyzer.analyze_section(content, section_type)\n            low_quality_metrics[section_type] = metrics\n    \n        # Analyze continuity for both\n        high_continuity_report = continuity_validator.validate_newsletter_continuity(high_quality_sections)\n        low_continuity_report = continuity_validator.validate_newsletter_continuity(low_quality_sections)\n    \n        # High quality should correlate with better continuity\n        high_avg_quality = sum(m.overall_score for m in high_quality_metrics.values()) / len(high_quality_metrics)\n        low_avg_quality = sum(m.overall_score for m in low_quality_metrics.values()) / len(low_quality_metrics)\n    \n        assert high_avg_quality > low_avg_quality\n>       assert high_continuity_report.overall_continuity_score >= low_continuity_report.overall_continuity_score\nE       AssertionError: assert 0.6183923031625751 >= 0.7408367346938776\nE        +  where 0.6183923031625751 = ContinuityReport(overall_continuity_score=0.6183923031625751, narrative_flow_score=0.15, style_consistency_score=0.9946410105419172, transition_quality_score=0.5, redundancy_score=1.0, sections_analyzed=3, transitions_analyzed=[TransitionAnalysis(from_section=<SectionType.INTRODUCTION: 'introduction'>, to_section=<SectionType.ANALYSIS: 'analysis'>, transition_quality=0.0, has_explicit_transition=False, transition_text='Welcome to our comprehensive analysis of machine learning advances. \\n            This systematic review examines recent developments and their practical implications.\\n\\nBuilding on these foundations, our examination reveals significant \\n            performance improvements across multiple evaluation metrics. The research demonstrates \\n            consistent enhanceme', issues=[ContinuityIssue(issue_type=<ContinuityIssueType.ABRUPT_TRANSITION: 'abrupt_transition'>, severity=0.6, location='Between introduction and analysis', description='Abrupt transition between section types without connecting language', suggestion='Add transitional phrases to connect the sections smoothly', section_1=<SectionType.INTRODUCTION: 'introduction'>, section_2=<SectionType.ANALYSIS: ...s=[])], style_analysis=StyleAnalysis(overall_consistency=0.9946410105419172, tone_consistency=0.9864230316257514, vocabulary_consistency=1.0, structure_consistency=0.9975, issues=[], style_profile={'avg_formality_score': 0.0, 'variance_formality_score': 0.0, 'avg_technical_density': 0.0, 'variance_technical_density': 0.0, 'avg_avg_sentence_length': 10.5, 'variance_avg_sentence_length': 0.5, 'avg_personal_pronoun_ratio': 0.03269537480063796, 'variance_personal_pronoun_ratio': 0.0005430787349699461, 'avg_passive_voice_ratio': 0.0, 'variance_passive_voice_ratio': 0.0, 'avg_word_count': 21.0, 'variance_word_count': 2.0, 'avg_sentence_count': 2.0, 'variance_sentence_count': 0.0}), issues=[ContinuityIssue(issue_type=<ContinuityIssueType.ABRUPT_TRANSITION: 'abrupt_transition'>, severity=0.6, location='Between introduction and analysis', description='Abrupt transition between section types without connecting language', suggestion='Add transitional phrases to connect the sections smoothly', section_1=<SectionType.INTRODUCTION: 'introduction'>, section_2=<SectionType.ANALYSIS: 'analysis'>, content_snippet='')], recommendations=['Improve 2 poor section transitions with connecting language']).overall_continuity_score\nE        +  and   0.7408367346938776 = ContinuityReport(overall_continuity_score=0.7408367346938776, narrative_flow_score=0.3, style_consistency_score=0.8361224489795918, transition_quality_score=1.0, redundancy_score=1.0, sections_analyzed=3, transitions_analyzed=[TransitionAnalysis(from_section=<SectionType.INTRODUCTION: 'introduction'>, to_section=<SectionType.ANALYSIS: 'analysis'>, transition_quality=0.3, has_explicit_transition=True, transition_text='intro stuff\\n\\nTherefore, the comprehensive methodology demonstrates significant findings.', issues=[], suggestions=[]), TransitionAnalysis(from_section=<SectionType.ANALYSIS: 'analysis'>, to_section=<SectionType.CONCLUSION: 'conclusion'>, transition_quality=0.3, has_explicit_transition=True, transition_text='Therefore, the comprehensive methodology demonstrates significant findings.\\n\\nso thats it basically', issues=[], suggestions=[])], style_analysis=StyleAnalysis(overall_consistency=0.8361224489795918, tone_consistency=0.6201814058956916, vocabulary_consistency=0.909297052154195, structure_consistency=0.9788888888888889, issues=[ContinuityIssue(issue_type=<ContinuityIssueType.TONE_SHIFT: 'tone_shift'>, severity=0.4, location='introduction section', description='S...nce_count': 0.3333333333333333, 'variance_sentence_count': 0.22222222222222224}), issues=[ContinuityIssue(issue_type=<ContinuityIssueType.TONE_SHIFT: 'tone_shift'>, severity=0.4, location='introduction section', description='Section has noticeably more formal tone than other sections', suggestion='Adjust tone to match overall newsletter style', section_1=<SectionType.INTRODUCTION: 'introduction'>, section_2=None, content_snippet=''), ContinuityIssue(issue_type=<ContinuityIssueType.TONE_SHIFT: 'tone_shift'>, severity=0.4, location='analysis section', description='Section has noticeably more formal tone than other sections', suggestion='Adjust tone to match overall newsletter style', section_1=<SectionType.ANALYSIS: 'analysis'>, section_2=None, content_snippet=''), ContinuityIssue(issue_type=<ContinuityIssueType.TONE_SHIFT: 'tone_shift'>, severity=0.4, location='conclusion section', description='Section has noticeably more informal tone than other sections', suggestion='Adjust tone to match overall newsletter style', section_1=<SectionType.CONCLUSION: 'conclusion'>, section_2=None, content_snippet='')], recommendations=['Improve 2 poor section transitions with connecting language']).overall_continuity_score\n\ntests/test_integration.py:318: AssertionError\n----------------------------- Captured stderr call -----------------------------\nINFO:src.core.section_quality_metrics:Section quality analyzer initialized\nINFO:src.core.continuity_validator:Transition analyzer initialized\nINFO:src.core.continuity_validator:Style consistency analyzer initialized\nINFO:src.core.continuity_validator:Redundancy detector initialized\nINFO:src.core.continuity_validator:Continuity validator initialized\nDEBUG:src.core.section_quality_metrics:Analyzed section introduction: score 0.300 (19 words)\nDEBUG:src.core.section_quality_metrics:Analyzed section analysis: score 0.387 (22 words)\nDEBUG:src.core.section_quality_metrics:Analyzed section conclusion: score 0.323 (22 words)\nDEBUG:src.core.section_quality_metrics:Analyzed section introduction: score 0.280 (2 words)\nDEBUG:src.core.section_quality_metrics:Analyzed section analysis: score 0.387 (7 words)\nDEBUG:src.core.section_quality_metrics:Analyzed section conclusion: score 0.269 (4 words)\n------------------------------ Captured log call -------------------------------\nINFO     src.core.section_quality_metrics:section_quality_metrics.py:171 Section quality analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:116 Transition analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:308 Style consistency analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:497 Redundancy detector initialized\nINFO     src.core.continuity_validator:continuity_validator.py:561 Continuity validator initialized\nDEBUG    src.core.section_quality_metrics:section_quality_metrics.py:226 Analyzed section introduction: score 0.300 (19 words)\nDEBUG    src.core.section_quality_metrics:section_quality_metrics.py:226 Analyzed section analysis: score 0.387 (22 words)\nDEBUG    src.core.section_quality_metrics:section_quality_metrics.py:226 Analyzed section conclusion: score 0.323 (22 words)\nDEBUG    src.core.section_quality_metrics:section_quality_metrics.py:226 Analyzed section introduction: score 0.280 (2 words)\nDEBUG    src.core.section_quality_metrics:section_quality_metrics.py:226 Analyzed section analysis: score 0.387 (7 words)\nDEBUG    src.core.section_quality_metrics:section_quality_metrics.py:226 Analyzed section conclusion: score 0.269 (4 words)\n________ TestComponentInteractions.test_boundary_detection_consistency _________\n\nself = <tests.test_integration.TestComponentInteractions object at 0x107accb90>\n\n    def test_boundary_detection_consistency(self):\n        \"\"\"Test consistency of boundary detection across components.\"\"\"\n        content_with_clear_boundaries = \"\"\"# Introduction Section\n        This is the introduction to our newsletter.\n    \n        ## News and Updates\n        Here are the latest developments.\n    \n        # Technical Analysis\n        Deep dive into the technical aspects.\n    \n        ## How-To Guide\n        Step-by-step implementation instructions.\n    \n        # Summary and Conclusion\n        Wrapping up the key points.\n        \"\"\"\n    \n        # Test boundary detection\n        detector = SectionBoundaryDetector()\n        boundaries = detector.detect_boundaries(content_with_clear_boundaries)\n    \n        # Test refinement loop extraction\n        refinement_loop = SectionAwareRefinementLoop()\n        sections = refinement_loop._extract_sections(content_with_clear_boundaries, boundaries)\n    \n        # Should detect multiple sections consistently\n>       assert len(boundaries) >= 4\nE       AssertionError: assert 1 >= 4\nE        +  where 1 = len([SectionBoundary(section_type=<SectionType.INTRODUCTION: 'introduction'>, start_index=0, end_index=407, title='# Introduction Section', confidence=0.9)])\n\ntests/test_integration.py:347: AssertionError\n----------------------------- Captured stderr call -----------------------------\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\nINFO:src.core.section_aware_refinement:Section-aware refinement loop initialized (max_iterations=3)\n------------------------------ Captured log call -------------------------------\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\nINFO     src.core.section_aware_refinement:section_aware_refinement.py:190 Section-aware refinement loop initialized (max_iterations=3)\n__________ TestPerformanceAndScalability.test_multiple_section_types ___________\n\nself = <tests.test_integration.TestPerformanceAndScalability object at 0x107acd3d0>\n\n    def test_multiple_section_types(self):\n        \"\"\"Test handling of newsletters with many different section types.\"\"\"\n        multi_section_content = \"\"\"# Welcome Introduction\n        Welcome to our multi-faceted newsletter.\n    \n        ## Breaking News\n        Latest announcements and updates.\n    \n        ### In-Depth Analysis\n        Comprehensive examination of trends.\n    \n        ## Step-by-Step Tutorial\n        Practical implementation guide.\n    \n        ### Research Insights\n        Academic research and findings.\n    \n        ## Industry Applications\n        Real-world use cases and examples.\n    \n        # Final Thoughts\n        Conclusion and next steps.\n        \"\"\"\n    \n        # Test all components handle multiple sections\n        detector = SectionBoundaryDetector()\n        boundaries = detector.detect_boundaries(multi_section_content)\n    \n        prompt_manager = SectionAwarePromptManager()\n        context = {'topic': 'Multi-Topic Newsletter', 'audience': 'General', 'content_focus': 'Various'}\n    \n        for boundary in boundaries:\n            section_content = multi_section_content[boundary.start_index:boundary.end_index]\n            detected_type = prompt_manager.detect_section_type(section_content, context)\n>           assert detected_type in [section.value for section in SectionType]\nE           AssertionError: assert <SectionType.INTRODUCTION: 'introduction'> in ['introduction', 'analysis', 'tutorial', 'news', 'conclusion', 'general']\n\ntests/test_integration.py:442: AssertionError\n----------------------------- Captured stderr call -----------------------------\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\n------------------------------ Captured log call -------------------------------\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\n___________ TestRealWorldScenarios.test_typical_newsletter_workflow ____________\n\nself = <tests.test_integration.TestRealWorldScenarios object at 0x107acdfa0>\n\n    def test_typical_newsletter_workflow(self):\n        \"\"\"Test typical newsletter generation workflow.\"\"\"\n        # Simulate typical user input\n        user_content = \"\"\"# AI Weekly Update\n    \n        Welcome to this week's AI newsletter! We're excited to share the latest developments.\n    \n        ## What's New This Week\n    \n        - OpenAI announced new research on multimodal models\n        - Google DeepMind published breakthrough quantum computing results\n        - Several startups secured funding for AI infrastructure\n    \n        ## Deep Dive: Transformer Efficiency\n    \n        Recent research has focused on making transformer models more efficient.\n        New attention mechanisms reduce computational requirements by 35%.\n        This has significant implications for deployment at scale.\n    \n        ## Getting Started with New Tools\n    \n        Here's how to implement the latest efficiency improvements:\n    \n        1. Update your model architecture\n        2. Retrain with new attention patterns\n        3. Benchmark performance improvements\n    \n        ## Wrap-Up\n    \n        This week showed continued progress in AI efficiency and capability.\n        Next week we'll explore applications in robotics and automation.\n        \"\"\"\n    \n        user_context = {\n            'topic': 'AI Weekly Newsletter',\n            'audience': 'AI/ML Engineers',\n            'content_focus': 'Latest AI Research and Tools',\n            'word_count': 2500,\n            'tone': 'professional',\n            'technical_level': 'intermediate'\n        }\n    \n        # Execute complete workflow\n        prompt_manager = SectionAwarePromptManager()\n        refinement_loop = SectionAwareRefinementLoop(max_iterations=2)\n        quality_system = SectionAwareQualitySystem()\n        continuity_validator = ContinuityValidator()\n    \n        # 1. Section detection and analysis\n        boundaries = refinement_loop.boundary_detector.detect_boundaries(user_content)\n>       assert len(boundaries) >= 4  # Should detect intro, news, analysis, tutorial, conclusion\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: assert 1 >= 4\nE        +  where 1 = len([SectionBoundary(section_type=<SectionType.ANALYSIS: 'analysis'>, start_index=0, end_index=1128, title='Main Content', confidence=0.5)])\n\ntests/test_integration.py:638: AssertionError\n----------------------------- Captured stderr call -----------------------------\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\nINFO:src.core.section_aware_prompts:Section-aware prompt manager initialized with 5 templates\nINFO:src.core.section_aware_refinement:Section-aware refinement loop initialized (max_iterations=2)\nINFO:src.core.section_quality_metrics:Section quality analyzer initialized\nINFO:src.core.section_quality_metrics:Section-aware quality system initialized\nINFO:src.core.continuity_validator:Transition analyzer initialized\nINFO:src.core.continuity_validator:Style consistency analyzer initialized\nINFO:src.core.continuity_validator:Redundancy detector initialized\nINFO:src.core.continuity_validator:Continuity validator initialized\n------------------------------ Captured log call -------------------------------\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\nINFO     src.core.section_aware_prompts:section_aware_prompts.py:299 Section-aware prompt manager initialized with 5 templates\nINFO     src.core.section_aware_refinement:section_aware_refinement.py:190 Section-aware refinement loop initialized (max_iterations=2)\nINFO     src.core.section_quality_metrics:section_quality_metrics.py:171 Section quality analyzer initialized\nINFO     src.core.section_quality_metrics:section_quality_metrics.py:701 Section-aware quality system initialized\nINFO     src.core.continuity_validator:continuity_validator.py:116 Transition analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:308 Style consistency analyzer initialized\nINFO     src.core.continuity_validator:continuity_validator.py:497 Redundancy detector initialized\nINFO     src.core.continuity_validator:continuity_validator.py:561 Continuity validator initialized\n================================ tests coverage ================================\n_______________ coverage: platform darwin, python 3.12.7-final-0 _______________\n\nName                                     Stmts   Miss  Cover   Missing\n----------------------------------------------------------------------\nsrc/__init__.py                              0      0   100%\nsrc/agents/__init__.py                       0      0   100%\nsrc/agents/agentic_rag_agent.py            211    211     0%   11-567\nsrc/agents/agents.py                        14     14     0%   8-50\nsrc/agents/base.py                         216    216     0%   8-554\nsrc/agents/content_format_optimizer.py     350    350     0%   10-918\nsrc/agents/editing.py                      355    355     0%   8-1026\nsrc/agents/management.py                   340    340     0%   9-885\nsrc/agents/research.py                     523    523     0%   8-1345\nsrc/agents/writing.py                      245    245     0%   8-775\nsrc/core/__init__.py                         0      0   100%\nsrc/core/campaign_context.py                35     35     0%   9-75\nsrc/core/citation_manager.py               392    392     0%   9-834\nsrc/core/code_generator.py                 100    100     0%   6-496\nsrc/core/config_manager.py                 126    126     0%   9-353\nsrc/core/constants.py                       43     43     0%   3-129\nsrc/core/content_validator.py              107    107     0%   8-238\nsrc/core/continuity_validator.py           298      8    97%   209, 239, 358, 387, 405, 418, 472, 677\nsrc/core/core.py                            44     44     0%   3-110\nsrc/core/exceptions.py                      22     22     0%   8-60\nsrc/core/execution_state.py                 87     87     0%   9-182\nsrc/core/feedback_orchestrator.py          217    217     0%   9-591\nsrc/core/feedback_system.py                268    268     0%   9-599\nsrc/core/import_helper.py                  125    125     0%   3-213\nsrc/core/learning_system.py                200    200     0%   9-402\nsrc/core/llm_cli.py                        127    127     0%   4-267\nsrc/core/llm_config_validator.py           141    141     0%   3-361\nsrc/core/llm_providers.py                  108    108     0%   3-240\nsrc/core/prompts.py                         11     11     0%   3-61\nsrc/core/quality_gate.py                   155    155     0%   8-332\nsrc/core/refinement_loop.py                196    196     0%   9-454\nsrc/core/research_strategy.py              264    264     0%   8-546\nsrc/core/section_aware_prompts.py          116      0   100%\nsrc/core/section_aware_refinement.py       242      8    97%   230-232, 314, 365, 427, 429, 507\nsrc/core/section_quality_metrics.py        411     16    96%   74, 251, 268-269, 274, 341, 376-377, 382, 448, 451-453, 527-528, 547\nsrc/core/template_manager.py               153    153     0%   6-766\nsrc/core/tool_usage_analytics.py           313    313     0%   8-766\nsrc/core/tool_usage_tracker.py             237    237     0%   8-558\nsrc/core/utils.py                          138    138     0%   8-292\nsrc/core/workflow_orchestrator.py          242    242     0%   9-705\nsrc/ingest.py                               18     18     0%   3-24\nsrc/main.py                                221    221     0%   12-399\nsrc/quality/__init__.py                      2      2     0%   8-11\nsrc/quality/base.py                         76     76     0%   8-172\nsrc/quality/content_validator.py           199    199     0%   7-516\nsrc/quality/technical_validator.py         103    103     0%   7-260\nsrc/storage/__init__.py                     56     56     0%   8-136\nsrc/storage/base.py                        162    162     0%   8-302\nsrc/storage/data_manager.py                225    225     0%   8-428\nsrc/storage/memory_store.py                195    195     0%   7-351\nsrc/storage/migration.py                   169    169     0%   8-367\nsrc/storage/vector_store.py                247    247     0%   8-516\nsrc/templates/__init__.py                    2      2     0%   7-20\nsrc/templates/code_templates.py            153    153     0%   8-759\nsrc/tools/__init__.py                        4      4     0%   3-12\nsrc/tools/cache_manager.py                 266    266     0%   8-518\nsrc/tools/code_executor.py                 247    247     0%   8-595\nsrc/tools/credibility_scorer.py            246    246     0%   9-664\nsrc/tools/enhanced_search.py               420    420     0%   9-900\nsrc/tools/grammar_linter.py                125    125     0%   9-334\nsrc/tools/notion_integration.py             57     57     0%   5-116\nsrc/tools/query_refinement.py              200    200     0%   8-514\nsrc/tools/search_provider.py               200    200     0%   5-420\nsrc/tools/syntax_validator.py              251    251     0%   8-586\nsrc/tools/tools.py                         162    162     0%   8-490\n----------------------------------------------------------------------\nTOTAL                                    11178  10143     9%\nCoverage HTML written to dir tests/coverage_html\nCoverage JSON written to file tests/coverage.json\nFAIL Required test coverage of 80% not reached. Total coverage: 9.26%\n=========================== short test summary info ============================\nFAILED tests/test_section_aware_prompts.py::TestSectionAwarePromptManager::test_error_handling\nFAILED tests/test_section_aware_prompts.py::TestConvenienceFunctions::test_detect_section_type_function\nFAILED tests/test_section_aware_refinement.py::TestSectionAwareRefinementLoop::test_basic_refinements\nFAILED tests/test_continuity_validator.py::TestTransitionAnalyzer::test_analyze_transition_with_explicit_indicator\nFAILED tests/test_continuity_validator.py::TestTransitionAnalyzer::test_generate_transition_suggestions\nFAILED tests/test_continuity_validator.py::TestIntegration::test_problematic_content_detection\nFAILED tests/test_continuity_validator.py::TestIntegration::test_high_quality_content_validation\nFAILED tests/test_integration.py::TestSectionAwareWorkflow::test_end_to_end_section_aware_processing\nFAILED tests/test_integration.py::TestComponentInteractions::test_quality_continuity_correlation\nFAILED tests/test_integration.py::TestComponentInteractions::test_boundary_detection_consistency\nFAILED tests/test_integration.py::TestPerformanceAndScalability::test_multiple_section_types\nFAILED tests/test_integration.py::TestRealWorldScenarios::test_typical_newsletter_workflow\n======================== 12 failed, 131 passed in 3.48s ========================\n",
      "stderr": "",
      "success": false
    }
  }
}